// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: api/adapter/adapter.proto

package adapter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Adapter_SetState_FullMethodName       = "/adapter.Adapter/SetState"
	Adapter_ClearState_FullMethodName     = "/adapter.Adapter/ClearState"
	Adapter_UpdateResource_FullMethodName = "/adapter.Adapter/UpdateResource"
	Adapter_AddResource_FullMethodName    = "/adapter.Adapter/AddResource"
	Adapter_RemoveResource_FullMethodName = "/adapter.Adapter/RemoveResource"
)

// AdapterClient is the client API for Adapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdapterClient interface {
	SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error)
	ClearState(ctx context.Context, in *ClearStateRequest, opts ...grpc.CallOption) (*ClearStateResponse, error)
	UpdateResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error)
	AddResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*AddResourceResponse, error)
	RemoveResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*RemoveResourceResponse, error)
}

type adapterClient struct {
	cc grpc.ClientConnInterface
}

func NewAdapterClient(cc grpc.ClientConnInterface) AdapterClient {
	return &adapterClient{cc}
}

func (c *adapterClient) SetState(ctx context.Context, in *SetStateRequest, opts ...grpc.CallOption) (*SetStateResponse, error) {
	out := new(SetStateResponse)
	err := c.cc.Invoke(ctx, Adapter_SetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) ClearState(ctx context.Context, in *ClearStateRequest, opts ...grpc.CallOption) (*ClearStateResponse, error) {
	out := new(ClearStateResponse)
	err := c.cc.Invoke(ctx, Adapter_ClearState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) UpdateResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*UpdateResourceResponse, error) {
	out := new(UpdateResourceResponse)
	err := c.cc.Invoke(ctx, Adapter_UpdateResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) AddResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*AddResourceResponse, error) {
	out := new(AddResourceResponse)
	err := c.cc.Invoke(ctx, Adapter_AddResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adapterClient) RemoveResource(ctx context.Context, in *ResourceRequest, opts ...grpc.CallOption) (*RemoveResourceResponse, error) {
	out := new(RemoveResourceResponse)
	err := c.cc.Invoke(ctx, Adapter_RemoveResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdapterServer is the server API for Adapter service.
// All implementations must embed UnimplementedAdapterServer
// for forward compatibility
type AdapterServer interface {
	SetState(context.Context, *SetStateRequest) (*SetStateResponse, error)
	ClearState(context.Context, *ClearStateRequest) (*ClearStateResponse, error)
	UpdateResource(context.Context, *ResourceRequest) (*UpdateResourceResponse, error)
	AddResource(context.Context, *ResourceRequest) (*AddResourceResponse, error)
	RemoveResource(context.Context, *ResourceRequest) (*RemoveResourceResponse, error)
	mustEmbedUnimplementedAdapterServer()
}

// UnimplementedAdapterServer must be embedded to have forward compatible implementations.
type UnimplementedAdapterServer struct {
}

func (UnimplementedAdapterServer) SetState(context.Context, *SetStateRequest) (*SetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetState not implemented")
}
func (UnimplementedAdapterServer) ClearState(context.Context, *ClearStateRequest) (*ClearStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearState not implemented")
}
func (UnimplementedAdapterServer) UpdateResource(context.Context, *ResourceRequest) (*UpdateResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedAdapterServer) AddResource(context.Context, *ResourceRequest) (*AddResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedAdapterServer) RemoveResource(context.Context, *ResourceRequest) (*RemoveResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveResource not implemented")
}
func (UnimplementedAdapterServer) mustEmbedUnimplementedAdapterServer() {}

// UnsafeAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdapterServer will
// result in compilation errors.
type UnsafeAdapterServer interface {
	mustEmbedUnimplementedAdapterServer()
}

func RegisterAdapterServer(s grpc.ServiceRegistrar, srv AdapterServer) {
	s.RegisterService(&Adapter_ServiceDesc, srv)
}

func _Adapter_SetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).SetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_SetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).SetState(ctx, req.(*SetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_ClearState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).ClearState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_ClearState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).ClearState(ctx, req.(*ClearStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).UpdateResource(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).AddResource(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Adapter_RemoveResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdapterServer).RemoveResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Adapter_RemoveResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdapterServer).RemoveResource(ctx, req.(*ResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adapter_ServiceDesc is the grpc.ServiceDesc for Adapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adapter.Adapter",
	HandlerType: (*AdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetState",
			Handler:    _Adapter_SetState_Handler,
		},
		{
			MethodName: "ClearState",
			Handler:    _Adapter_ClearState_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _Adapter_UpdateResource_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _Adapter_AddResource_Handler,
		},
		{
			MethodName: "RemoveResource",
			Handler:    _Adapter_RemoveResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/adapter/adapter.proto",
}
