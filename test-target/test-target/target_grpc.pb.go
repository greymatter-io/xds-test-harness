// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test_target

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShimClient is the client API for Shim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShimClient interface {
	GiveCompliment(ctx context.Context, in *ComplimentRequest, opts ...grpc.CallOption) (*ComplimentResponse, error)
	AddCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error)
}

type shimClient struct {
	cc grpc.ClientConnInterface
}

func NewShimClient(cc grpc.ClientConnInterface) ShimClient {
	return &shimClient{cc}
}

func (c *shimClient) GiveCompliment(ctx context.Context, in *ComplimentRequest, opts ...grpc.CallOption) (*ComplimentResponse, error) {
	out := new(ComplimentResponse)
	err := c.cc.Invoke(ctx, "/testtarget.Shim/GiveCompliment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shimClient) AddCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*ClusterResponse, error) {
	out := new(ClusterResponse)
	err := c.cc.Invoke(ctx, "/testtarget.Shim/AddCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShimServer is the server API for Shim service.
// All implementations must embed UnimplementedShimServer
// for forward compatibility
type ShimServer interface {
	GiveCompliment(context.Context, *ComplimentRequest) (*ComplimentResponse, error)
	AddCluster(context.Context, *ClusterRequest) (*ClusterResponse, error)
	mustEmbedUnimplementedShimServer()
}

// UnimplementedShimServer must be embedded to have forward compatible implementations.
type UnimplementedShimServer struct {
}

func (UnimplementedShimServer) GiveCompliment(context.Context, *ComplimentRequest) (*ComplimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveCompliment not implemented")
}
func (UnimplementedShimServer) AddCluster(context.Context, *ClusterRequest) (*ClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCluster not implemented")
}
func (UnimplementedShimServer) mustEmbedUnimplementedShimServer() {}

// UnsafeShimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShimServer will
// result in compilation errors.
type UnsafeShimServer interface {
	mustEmbedUnimplementedShimServer()
}

func RegisterShimServer(s grpc.ServiceRegistrar, srv ShimServer) {
	s.RegisterService(&Shim_ServiceDesc, srv)
}

func _Shim_GiveCompliment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComplimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShimServer).GiveCompliment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testtarget.Shim/GiveCompliment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShimServer).GiveCompliment(ctx, req.(*ComplimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shim_AddCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShimServer).AddCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testtarget.Shim/AddCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShimServer).AddCluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shim_ServiceDesc is the grpc.ServiceDesc for Shim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testtarget.Shim",
	HandlerType: (*ShimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveCompliment",
			Handler:    _Shim_GiveCompliment_Handler,
		},
		{
			MethodName: "AddCluster",
			Handler:    _Shim_AddCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test-target/target.proto",
}
