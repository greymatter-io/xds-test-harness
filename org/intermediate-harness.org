#+TITLE: Intermediate Harness
#+PROPERTY: header-args :results output :noweb yes
#+PROPERTY: header-args:go+ :main no

* Goal
Setup a harness that models the initial diagram in the SoW, with a test case
being read by a test runner, the runner setting up the necessary state on the
target via a test adapter, and running through a real-life test scenario: in
this case, sending a discovery request, and receiving the appropriate discovery
response.
* Design Goals
This is a Proof-of-Concept, but I still want to set up some patterns that will
be important for the eventual test framework.
1. *Test Cases are separate from their implementation*
   The cases should be written in a spec that can be implemented in a variety of
   languages. Perhaps some of the tests may be best implemented in Golang, and
   some may be best implemented in Python. No matter which, the style in which
   the test is written should not change based on the test runners'
   implementation.
2. *Language-Agnostic Adapter*
   The adapter should, similarly, be language-agnostic. The point of the adapter
   is to be able to communicate with a target and set up its necessary state. As
   each target will be implemented differently, and likely in different
   languages, we do not want to have to write a new adapter per target. Instead,
   it should be an api that can be implemented on the target and runner, so
   there is a known contract to set up and retrieve state.
3. *Adapter is separate from the runner*
   
   By making the adapter an API, it allows for us to implement the client in
   multiple languages if we find that certain tests need to be written in
   something besides go.
   
* Current Layout
The initial Harness is made of the following components:
- Test Cases (spec) ::
  These are a set of files written in [[https://cucumber.io/docs/gherkin/][gherkin]]. The syntax follows a
  specification, but is implementation-agnostic. In this harness, they are
  stored in [[file:~/Projects/xDS-conformance/test-harness/tests/features/][tests/features]]
- Tests and Test Runner ::
  These are the implementations of the test cases. At this moment, we have a
  single implemented test, at [[file:~/Projects/xDS-conformance/test-harness/tests/acknack_test.go][tests/acknack_test.go]] Our runner is simple: the
  [[https://github.com/cucumber/godog][godog binary]]. In the future, this will be wrapped into a larger go program,
  but this method works well at the moment.

  When we run godog in our [[file:~/Projects/xDS-conformance/test-harness/tests/][tests]] directory, it compiles all our feature files and
  any test files, and matches the test implementation to each line in the test
  case.
- Adapter api (spec) ::
  This is a proto file held at [[file:~/Projects/xDS-conformance/test-harness/api/adapter/adapter.proto][api/adapter/adapter.proto]]. It specifies the
  services between both the runner and the adapter, and the adapter and the
  target. Each target can then check out this proto, implement its half in their
  target-specific way, then let the runner know how to connect to the adapter.
- Test Target ::
  We have an example implementation of the go-control-plane that we use as a
  test target, to test our tests.  It is stored in [[file:~/Projects/xDS-conformance/test-harness/examples/test-target/][examples/test-target]]

*  Benefit of Gherkin for test-writing
  An exciting part of this style is that we can write the tests in a consistent,
  generic pattern that is then implemented by a set of resuable test functions.

  For example, you could have any number of tests written in this pattern.

  #+begin_example feature
  Given A server with starting state matching snapshot yaml:
  ```yaml
  ## starting state
  ```
  When a Client sends discovery request matching yaml:
  ```yaml
  ## discoveryRequest
  ```
  Then it receives a discovery response matching yaml:
 ```
 ## discoveryResponse
 ```
  #+end_example

  And each would be implemented using the same set of functions. The difference
  between tests, then, is in the beginning state, and the requests and responses
  given out.

  This allows for test writers to only have to write in human-readable gherkin,
  knowing that as long as they follow an outlined pattern, the implementation
  will be handled automatically. It is also a style that matches a lot of the
  existing envoy and xDS docs.

* Changes from Previous Harness
** Adapter only set on Target
Before, there were three different services to connect to, an adapter, a shim, and a target.  The adapter and the shim were doing the same thing and were an unnecessary complexity.

Now, there is a single api defined, that of the adapter.

At the moment, it only has a single service, ~setState~, which takes in a snapshot, sends it to the target, and returns a
success message.

Most of the message definitions are to bring in a proper structure for that snapshot.

You can read the schema at  [[file:~/Projects/xDS-conformance/test-harness/api/adapter/adapter.proto][api/adapter/adapter.proto]]
** Target and Adapter locations set via a config file
Before, I had the locations of the target, shim, and adapter defined in the
gherkin spec. This felt distracting and too constrained. Really, all the tests
should care about is that there is a target and adapter reachable via gRPC.

I updated the feature file to have a more generic description for the
background, and then created a [[file:~/Projects/xDS-conformance/test-harness/config.yaml][config.yaml]] that holds their locations. This
required writing a simple [[file:~/Projects/xDS-conformance/test-harness/internal/parser/parser.go][parser]] that converts from yaml to our clientConfig
struct. I extended that parser to also handle our snapshot specification used in
the above adapter.
* Questions
- **Is there an existing data type that is better for the Snapshot?**
  I am defining my own Snapshot message in this api.  I know there is a Snapshot defined in the go-control-plane cache, and this draws heavily from it.  However, I did not want to use it as its definitions came from one implementation for envoy, and not directly from the xDS docs.  is there an implementation-agnostic data type that should be used instead?
- **What should the expected response be?**
  The response now is a bit of a dummy definition.  This service triggers a side effect, namely the setting of state in some xDS server.  If it worked, then the current state should match the given snapshot...but how that is depicted could change per implementation.  I had one version of this that sent a snapshot and returned a snapshot, but it felt a little bit silly because they were always identical.  It made more sense for it to return a pass or fail, which i simplified to be a message string.  Is there a smarter exchange to be used here?
* Next Steps
From here, I want to make a couple more involved tests to see how I would need
to extend the Runner struct to handle them. Then, I think it is useful to spend
time away from the code and focus on the larger design, polishing the syntax in
these tests to fit xDS and to establish some useful building blocks for the
reusable test functions.
