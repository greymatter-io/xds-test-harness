#+TITLE: Intermediate Harness: Part Two

* Goal
A slightly more involved scenario, that incorporates a CDS stream. The learning
goals is to understand how to reset the state between scenarios and how to pass
along the discovery response channels between steps.
** Why reset the state?
Our scenarios should be able to be run in any order and be self-contained. There
is nuance in the version numbers being sent back and forth in the xDS protocol,
and we want to make sure our tests can handle them as consistently and simply as
possible.

Ideally, we are not having to restart the management server for each scenario.
Better is to start and connect to it and then contionually reset the state.
* Our Test
This is still a part of the acknack feature set, and so am appending this
scenario to the file.

I am uncertain the best wording for our given Basically, we want ot have an
established stream setup for the initial state that already has already been
acked. We don't care about the first discovery request and response, we want to
make sure when a resource is added we get an additional discovery response.

For now, this is how i've phrased it
#+NAME: new resourcescenario
#+begin_src feature
  Scenario:
    Given a Target setup with snapshot matching yaml:
     ```
     ---
     node: test-id
     version: "1"
     resources:
       endpoints:
       clusters:
       - name: foo
         connect_timeout:
           seconds: 5
     ```
     And an established CDS stream, with the last discovery request matching yaml:
     ```
     version_info: 1
     node: { id: test-id }
     resource_names:
     type_url: type.googleapis.com/envoy.config.cluster.v3.Cluster
     response_nonce:
     ```
     When Target State is updated to match yaml:
     ```
     ---
     node: test-id
     version: "2"
     resources:
       endpoints:
       clusters:
       - name: foo
         connect_timeout:
           seconds: 5
       - name: bar
         connect_timeout:
           seconds: 5
     ```

     Then I get a discovery response matching json:
     ```
     {
       "versionInfo":"1",
       "resources":[
         {"typeUrl":"type.googleapis.com/envoy.config.cluster.v3.Cluster",
          "value":"CgNmb28iAggF"}
        ],
        "typeUrl":"type.googleapis.com/envoy.config.cluster.v3.Cluster"
     }
     ```

     There's some particularities in herre to figure out.  The discovery request should have a response nonce, and i need to see if those are dynamic or not.  The discvoery response should be made cleaner, no longer using a hash but nicely outlined description of the state.

#+end_src
* Questions
** Best phrasing for the test, specifically the ack portion
