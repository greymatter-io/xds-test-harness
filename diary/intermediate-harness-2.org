#+TITLE: Intermediate Harness: Part Two

* Goal
A slightly more involved scenario, that incorporates a CDS stream. The learning
goals is to understand how to reset the state between scenarios and how to pass
along the discovery response channels between steps.
** Why reset the state?
Our scenarios should be able to be run in any order and be self-contained. There
is nuance in the version numbers being sent back and forth in the xDS protocol,
and we want to make sure our tests can handle them as consistently and simply as
possible.

Ideally, we are not having to restart the management server for each scenario.
Better is to start once and then continually reset the state.
* Our Test
This is still a part of the acknack feature set, and so am appending this
scenario to the file.

I am uncertain the best wording for our given test. Basically, we want to have
an established stream setup for the initial state. This means a discovery
request/response/request trade to show that the current version is ACKed by the
client. Then, we want the resources requested to change in some way, and to have
a new discovery response sent, without the client needing to do anything.

This test comes from the envoy docs: [[https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol#when-to-send-an-update][When to Send an Update.]] One thing I am
curious on is this section of the doc:
#+begin_quote
The management server should only send updates to the Envoy client when the
resources in the DiscoveryResponse have changed
#+end_quote

If I send a wildcard discovery request, do new resources being added count as a
change to the resources in the discovery response?

For example, if the initial state only has a single cluster named ~foo~, and so
the response to my first wildcard CDS request is to list that resource. Then,
~bar~ gets added as a cluster. Technically, this wasn't a resource in the first
discovery response, and so wouldn't trigger an update? However, the spirit of
the initial request was for any clusters, which you might think includes ones
made after that request.

I marked this as a question in the org, but for now will only update a resource
in the test and not add a new one.

Here, then, is the initial test:

#+NAME: new resourcescenario
#+begin_src feature
Scenario:
  Given a Target setup with snapshot matching yaml:
  ```
  ---
  node: test-id
  version: "1"
  resources:
  endpoints:
  clusters:
  - name: foo
  connect_timeout:
  seconds: 5
  ```
  And an established CDS stream, with the last discovery request matching yaml:
  ```
  version_info: 1
  node: { id: test-id }
  resource_names:
  type_url: type.googleapis.com/envoy.config.cluster.v3.Cluster
  response_nonce:
  ```
  When Target State is updated to match yaml:
  ```
  ---
  node: test-id
  version: "2"
  resources:
  endpoints:
  clusters:
  - name: foo
  connect_timeout:
  seconds: 10
  ```

  Then I get a discovery response matching yaml:
  ```
  version: 2
  typeUrl:"type.googleapis.com/envoy.config.cluster.v3.Cluster"
  resources:
  - foo
    connect_timeout:
      seconds: 5
  nonce: 2
  ```
#+end_src

There's some particularities in here to figure out. The discovery request should
have a response nonce, and i need to see if those are dynamic or not. The
discovery response, as compared to intermediate harness, is now explicit yaml
instead of a json hash. I will neeed to figure out how to do that.
* Dev Diary
** determine if nonce's are dynamic
For the next set, I think it would be easiest to set up a dummy go program that
has a CDS stream and outputs the discovery responses. It will stay running
listening for the DR's, and I will update the state through a secondary go
routine.

** send back clean yaml/json for resources instead of hash
This was a bit more difficult that i first expected due to yaml library
mismatch and a bit of confusion on parsing the discovery responses.

Right now, it takes a discovery response and casts it to the parser's discovery
response type (as this makes it easier for me to parse the yaml). For the
resources, i would like for it to check the resources value type an then do an
=anypb= unmarshalling to that type, but was finding that increasingly difficult
and so am casting them all to clusters for right now. This is a stopgap to just
get the test working in the general structure i want, but will need to revisit
the go typecasting to make sure I understand the best way to do these data
conversions.

** setup a reset state function
This looks to be as simple as just adding the snapshot to the cache, in other
words, using the existing adapter function. We just need to make sure we are
cleaning out the cache in the adapter before sending it to the server. We
updated the /xdsCache/ package with a =NewXDSCache()= function, so that whenever
we call setState, we know we are working with clean slates on the server and in
our adapter.

** Set up a stream function that passes requests and responses to our test functions
For this, We added a "CDS" struct to our Runner and pass the stream to that.
This lets us reference it in multiple steps. [[https://github.com/ii/xds-test-harness/blob/dstream/acknack_test.go#L80][In one step]] we send and receive
requests/responses, and in the [[https://github.com/ii/xds-test-harness/blob/dstream/acknack_test.go#L153][next step]] we validate the response against the
test yaml.

** implement latest test
Our two tests work, though their usescases are a bit simple. It is a good time,
I think, to revisit the test syntax itself, to see if we can find a clearer way
to illustrate an initial stream, and a more generic way to talk about receiving
discovery requests. Right now we have a few steps that are just slighly
different in wording, but quite different in implementation.

* Questions
** Best phrasing for the test, specifically the ack portion
** Should a discovery response be sent when new resources are added?
see [[https://github.com/ii/xds-test-harness/blob/dstream/org/intermediate-harness-2.org#L32][our test section]]

** Should there be  setState and updateState functions?
Right now, whenever the adapter sets the state, it fully wipes the cache and
replaces it based on the provided yaml. The advantage of this is we can be
explicit with what the server should look like with the version numbers and so
have more control over the discoveryResponses sent out.

This style doesn't seem to be how a server would actually be implemented though,
and I want to make sure we aren't writing an adapter that only servers our toy
server and how it passes tests.
